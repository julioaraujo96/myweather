{"version":3,"sources":["components/App/App.module.scss","components/LocationForm/LocationForm.module.scss","components/LocationForm/LocationForm.js","components/WeatherDisplay/WeatherDisplay.js","components/App/App.js","serviceWorker.js","index.js","components/WeatherDisplay/WeatherDisplay.module.scss"],"names":["module","exports","LocationForm","state","city","country","handleSubmit","e","preventDefault","props","onSubmitLocation","handleChange","target","name","value","setState","this","onSubmit","className","styles","FormDisplay","type","placeholder","onChange","Component","WeatherDisplay","forecast","weatherData","map","weather","getDay","Date","dt","day","temperature","Math","round","main","temp","icon","description","key","src","alt","API_KEY","process","BASE_URL","App","error","getWeather","a","fetch","response","status","Error","message","json","data","handleGetLocation","parseWeatherData","list","reverse","filter","item","index","timeOfDay","getUTCHours","slice","Helmet","charSet","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2922606.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__mpZMl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormDisplay\":\"LocationForm_FormDisplay__ung1f\"};","import React, { Component } from 'react';\r\nimport styles from './LocationForm.module.scss';\r\n\r\nclass LocationForm extends Component {\r\n  state = {\r\n    city: '',\r\n    country: ''\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { city, country } = this.state;\r\n    this.props.onSubmitLocation({ city, country });\r\n  };\r\n  handleChange = e => {\r\n    e.preventDefault();\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  render() {\r\n    const { city, country } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.FormDisplay}>\r\n        <input\r\n          type='text'\r\n          name='city'\r\n          placeholder='City...'\r\n          value={city}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input\r\n          type='text'\r\n          name='country'\r\n          placeholder='Country...'\r\n          value={country}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button>Search</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationForm;\r\n","import React from 'react';\r\nimport styles from './WeatherDisplay.module.scss';\r\n\r\nconst WeatherDisplay = props => {\r\n  const forecast = props.weatherData.map(weather => {\r\n    const date = new Date(weather.dt * 1000);\r\n    const days = [\r\n      'Sunday',\r\n      'Monday',\r\n      'Tuesday',\r\n      'Wednesday',\r\n      'Thursday',\r\n      'Friday',\r\n      'Saturday'\r\n    ];\r\n    const getDay = date.getDay();\r\n    const day = days[getDay];\r\n    const temperature = Math.round(weather.main.temp - 273.15);\r\n    const icon = weather.weather[0].icon;\r\n    const description = weather.weather[0].description;\r\n    return (\r\n      <div key={getDay} className={styles.day}>\r\n        <h2>{day}</h2>\r\n        <div className='icon'>\r\n          <p>{weather.weather[0].description}</p>\r\n          <img\r\n            src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n            alt={description}\r\n          />\r\n        </div>\r\n        <div className={styles.temp}>\r\n          <p>{temperature} Â°C</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  return <div className={styles.WeatherDisplay}>{forecast}</div>;\r\n};\r\n\r\nexport default WeatherDisplay;\r\n","import React, { Component } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport styles from './App.module.scss';\r\nimport LocationForm from '../LocationForm/LocationForm';\r\nimport WeatherDisplay from '../WeatherDisplay/WeatherDisplay';\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst BASE_URL = '//api.openweathermap.org/data/2.5/forecast';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    weather: null,\r\n    error: false\r\n  };\r\n  getWeather = async (city, country) => {\r\n    const response = await fetch(\r\n      `${BASE_URL}?q=${city},${country}&appid=${API_KEY}`\r\n    );\r\n    if (response.status !== 200)\r\n      throw new Error({\r\n        response,\r\n        message: \"Oh no! Couldn't reach the Weather folks...\"\r\n      });\r\n    const data = await response.json();\r\n    return data;\r\n  };\r\n\r\n  handleGetLocation = async ({ city, country }) => {\r\n    try {\r\n      const weatherData = await this.getWeather(city, country);\r\n      const weather = await this.parseWeatherData(weatherData);\r\n      this.setState({ weather: weather, error: false });\r\n    } catch ({ response, message }) {\r\n      this.setState({\r\n        error: true\r\n      });\r\n    }\r\n  };\r\n  parseWeatherData = weatherData =>\r\n    weatherData.list\r\n      .reverse()\r\n      .filter((item, index) => {\r\n        const date = new Date(item.dt * 1000);\r\n        const timeOfDay = date.getUTCHours();\r\n\r\n        if (index === 0 && timeOfDay < 15) {\r\n          return true;\r\n        }\r\n        return timeOfDay === 15;\r\n      })\r\n      .slice(0, 5);\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return (\r\n        <div className={styles.App}>\r\n          <Helmet>\r\n            <meta charSet='utf-8' />\r\n            <title>My Weather</title>\r\n          </Helmet>\r\n          {/* <Header /> */}\r\n          <LocationForm onSubmitLocation={this.handleGetLocation} />\r\n          <h3>Something went wrong... Make sure you enter a valid location.</h3>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className={styles.App}>\r\n        <Helmet>\r\n          <meta charSet='utf-8' />\r\n          <title>My Weather</title>\r\n        </Helmet>\r\n        {/* <Header /> */}\r\n        <LocationForm onSubmitLocation={this.handleGetLocation} />\r\n        {this.state.weather && (\r\n          <WeatherDisplay weatherData={this.state.weather} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport './styles/global.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nif (module.hot) {\r\n  module.hot.accept();\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherDisplay\":\"WeatherDisplay_WeatherDisplay__3V8as\",\"day\":\"WeatherDisplay_day__2SBmX\",\"temp\":\"WeatherDisplay_temp__1CeOz\"};"],"sourceRoot":""}